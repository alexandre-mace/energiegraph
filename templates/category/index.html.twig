{% extends 'base.html.twig' %}

{% block body %}
    <div class="row">
        <div class="col">
            <div class="autoComplete_wrapper">
                <input id="autoComplete" type="text" tabindex="1">
            </div>
            <div class="selection"></div>
            <script>
                // The autoComplete.js Engine instance creator
                const autoCompleteJS = new autoComplete({
                    data: {
                        src: {{ graphs.accessToSearch|raw }},
                        keys: ['title'],
                        filter: (list) => {
                            // Filter duplicates
                            // incase of multiple data keys usage
                            const filteredResults = Array.from(
                                new Set(list.map((value) => value.match))
                            ).map((food) => {
                                return list.find((value) => value.match === food);
                            });

                            return filteredResults;
                        }
                    },
                    placeHolder: "Rechercher",
                    resultsList: {
                        element: (list, data) => {
                            const info = document.createElement("div");
                            if (data.results.length > 0) {
                                // info.innerHTML = `Affiche <strong>${data.results.length}</strong> parmis <strong>${data.matches.length}</strong> résultats`;
                            } else {
                                info.innerHTML = `<div class="p-2"><strong>${data.matches.length}</strong> résultats correspondants pour <strong>"${data.query}"</strong></div>`;
                            }
                            list.prepend(info);
                        },
                        noResults: true,
                        maxResults: 15,
                        tabSelect: true
                    },
                    resultItem: {
                        element: (item, data) => {
                            // Modify Results Item Style
                            item.style = "display: flex; justify-content: space-between;";
                            // Modify Results Item Content
                            item.innerHTML = `
      <a href="${data.value.link}">
      <span style="text-overflow: ellipsis; white-space: nowrap; overflow: hidden;">
        ${data.value.title}
      </span>
      <span style="display: flex; align-items: center; font-size: 13px; font-weight: 100; text-transform: uppercase; color: rgba(0,0,0,.4);">
        ${data.value.category}
      </span></a>`;
                        },
                        highlight: true
                    },
                    events: {
                        input: {
                            focus: () => {
                                if (autoCompleteJS.input.value.length) autoCompleteJS.start();
                            }
                        }
                    }
                });
            </script>
        </div>
    </div>
    <div class="d-flex align-items-center mb-4">
        <div class="d-flex align-items-center">
            <img class="category-image mr-2" src="{{ category.emoji }}" alt="Image {{ category.title }}">
            <h1 class="category-title">{{ category.title }}</h1>
        </div>
        <div class="category-description ml-2 d-flex"> <span class="mr-2">-</span> {{ category.description|raw }}</div>
    </div>
    {% for subcategory in category.subcategories %}
        <h2 class="subcategory-title">{{ subcategory.title }}</h2>
        <div class="row">
            {% for graph in subcategory.graphs %}
                <div id="{{ graph.id }}" class="mb-4 {% if loop.index == 1 %}col-12{% else %}col-6{% endif %}">
                    <div class="graph-wrapper">
                        <h3 class="graph-title">{{ graph.title }}</h3>
                        <span class="hidden iframe-holder" data-iframe="{{ graph.iframe|replace({'width': 'loading="lazy" width'}) }}"></span>
                        <p>{{ graph.description|raw }}</p>
                    </div>
                </div>
            {% endfor %}
        </div>
    {% endfor %}
{% endblock %}
